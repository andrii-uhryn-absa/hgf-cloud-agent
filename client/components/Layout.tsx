import {
  Button,
  Card,
  Col,
  Container,
  Image,
  Loading,
  Row,
  Spacer,
  Text,
} from '@nextui-org/react'
import { useQuery, useQueryClient } from '@tanstack/react-query'
import Head from 'next/head'
import { ReactElement } from 'react'
import { cloudAgentUrl } from '../constants'
import { get } from '../utils'

export default function Layout({ children }: { children: ReactElement }) {
  const queryClient = useQueryClient()

  const didQuery = useQuery(['did'], () => get(`${cloudAgentUrl}/did`), {
    placeholderData: {},
  })
  const schemasQuery = useQuery(
    ['schemas'],
    () => get(`${cloudAgentUrl}/schemas`),
    {
      placeholderData: {},
    }
  )
  const registerDefinitionQuery = useQuery(
    ['register-definition'],
    () => get(`${cloudAgentUrl}/register-definition`),
    {
      refetchOnWindowFocus: false,
      enabled: false,
    }
  )

  return (
    <Container display="flex">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Card css={{ $$cardColor: '$colors$gradient' }}>
        <Card.Body>
          <Row justify="space-between" align="center">
            <Col>
              <Image
                width={300}
                height={79}
                src="/HL_GlobalForum_2022_PromoGraphics_Logo-White.svg"
                alt="Default Image"
                objectFit="cover"
              />
            </Col>
            <Col>
              <Row>
                <Text h6 size={15} color="white" css={{ m: 0 }}>
                  Public DID: {didQuery.data.did}
                </Text>
              </Row>
              <Row align="center">
                <Text h6 size={15} color="white" css={{ m: 0 }}>
                  Credential Definition ID:
                </Text>
                &nbsp;
                {schemasQuery.data.credentialDefinitionId ? (
                  <Text h6 size={15} color="white" css={{ m: 0 }}>
                    {schemasQuery.data.credentialDefinitionId}
                  </Text>
                ) : (
                  <Button
                    size="xs"
                    disabled={
                      registerDefinitionQuery.fetchStatus === 'fetching'
                    }
                    onPress={async () => {
                      await registerDefinitionQuery.refetch()
                      queryClient.invalidateQueries('schemas')
                    }}
                  >
                    {registerDefinitionQuery.fetchStatus === 'fetching' ? (
                      <Loading
                        type="points-opacity"
                        color="currentColor"
                        size="sm"
                      />
                    ) : (
                      'Register'
                    )}
                  </Button>
                )}
              </Row>
            </Col>
          </Row>
        </Card.Body>
      </Card>
      <Spacer y={1} />
      {children}
    </Container>
  )
}
